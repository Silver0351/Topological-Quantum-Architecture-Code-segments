import networkx as nx
import hashlib
from collections import defaultdict
import time
import threading

class BabelLibrary:
    def __init__(self):
        self.graph = nx.DiGraph()  # Directed graph for concepts and relationships
        self.hash_cache = {}  # Term -> Node ID
        self.glossary = defaultdict(list)  # Term -> [data entries]
        self.last_optimization = time.time()

    def add_concept(self, term, data, related_terms=None):
        """Add a concept to the library with optional related terms."""
        term_hash = hashlib.md5(term.encode()).hexdigest()  # Unique ID for term
        if term_hash not in self.graph:
            self.graph.add_node(term_hash, term=term, **data)
            self.hash_cache[term] = term_hash
            self.glossary[term].append(data)
        
        if related_terms:
            for rel_term in related_terms:
                rel_hash = hashlib.md5(rel_term.encode()).hexdigest()
                if rel_hash not in self.graph:
                    self.add_concept(rel_term, {"definition": f"Stub for {rel_term}"}, None)
                self.graph.add_edge(term_hash, rel_hash, weight=1.0, last_accessed=0)

    def search(self, term):
        """Search for a term and return its data and related concepts."""
        term_hash = self.hash_cache.get(term)
        if not term_hash:
            return "Term not found"
        related = list(self.graph.successors(term_hash))
        self.graph[term_hash][related[0]]["last_accessed"] = time.time()  # Simulate access
        return {
            "term": term,
            "data": self.graph.nodes[term_hash],
            "related": [self.graph.nodes[n]["term"] for n in related]
        }

    def interpolate_weights(self):
        """Adjust edge weights based on access patterns (neural network-like)."""
        current_time = time.time()
        for u, v, data in self.graph.edges(data=True):
            if data["last_accessed"] > self.last_optimization:
                data["weight"] += 0.1 * (current_time - data["last_accessed"])
            data["weight"] *= 0.99  # Decay weights over time
        self.last_optimization = current_time

    def add_permutations(self, term, num_permutations=2):
        """Generate and add permutations of a term."""
        suffixes = ["s", "ed", "ing", "ly"]  # Simple example permutations
        for suffix in suffixes[:num_permutations]:
            perm = term + suffix
            self.add_concept(perm, {"definition": f"Permutation of {term}"}, [term])

    def optimize_library(self, interval=60):
        """Run periodic optimization in a background thread."""
        while True:
            time.sleep(interval)
            self.interpolate_weights()

# Usage Example
library = BabelLibrary()

# Add concepts
library.add_concept("Fractal", {"definition": "A self-similar shape"}, ["Topology", "Recursion"])
library.add_concept("Topology", {"definition": "Study of spatial properties"}, ["Fractal"])
library.add_permutations("Fractal", num_permutations=2)

# Simulate a search
print(library.search("Fractal"))

# Start optimization loop in a background thread
thread = threading.Thread(target=library.optimize_library, args=(60,))
thread.daemon = True  # Stop thread when main program exits
thread.start()

# Keep the main thread alive for testing
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("Stopped by user")