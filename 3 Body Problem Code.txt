import numpy as np
from scipy.integrate import solve_ivp

def three_body_dynamics(t, y, G, m1, m2, m3):
    """
    Compute the derivatives for the three-body problem.

    Parameters:
    t : float
        Time.
    y : array_like
        State vector: [x1, y1, z1, vx1, vy1, vz1, x2, y2, z2, vx2, vy2, vz2, x3, y3, z3, vx3, vy3, vz3]
    G : float
        Gravitational constant.
    m1, m2, m3 : float
        Masses of the three bodies.

    Returns:
    dydt : array_like
        Derivatives of the state vector.
    """
    # Unpack the state vector
    x1, y1, z1, vx1, vy1, vz1, x2, y2, z2, vx2, vy2, vz2, x3, y3, z3, vx3, vy3, vz3 = y

    # Positions as vectors
    r1 = np.array([x1, y1, z1])
    r2 = np.array([x2, y2, z2])
    r3 = np.array([x3, y3, z3])

    # Relative position vectors
    r12 = r2 - r1
    r13 = r3 - r1
    r23 = r3 - r2

    # Distances between bodies
    d12 = np.linalg.norm(r12)
    d13 = np.linalg.norm(r13)
    d23 = np.linalg.norm(r23)

    # Gravitational accelerations based on Newton's law
    a1 = G * m2 * r12 / d12**3 + G * m3 * r13 / d13**3
    a2 = G * m1 * (-r12) / d12**3 + G * m3 * r23 / d23**3
    a3 = G * m1 * (-r13) / d13**3 + G * m2 * (-r23) / d23**3

    # Assemble derivatives: velocities for positions, accelerations for velocities
    dydt = [
        vx1, vy1, vz1,          # Derivatives of position for body 1
        a1[0], a1[1], a1[2],   # Derivatives of velocity for body 1
        vx2, vy2, vz2,          # Derivatives of position for body 2
        a2[0], a2[1], a2[2],   # Derivatives of velocity for body 2
        vx3, vy3, vz3,          # Derivatives of position for body 3
        a3[0], a3[1], a3[2]    # Derivatives of velocity for body 3
    ]

    return dydt

# Define simulation parameters
G = 1.0  # Gravitational constant (simplified units)
m1, m2, m3 = 1.0, 1.0, 1.0  # Masses of the three bodies

# Initial conditions: positions and velocities in an equilateral triangle
initial_conditions = [
    0.0, 0.0, 0.0,        # x1, y1, z1 (body 1 at origin)
    0.0, 0.0, 0.0,        # vx1, vy1, vz1 (zero initial velocity)
    1.0, 0.0, 0.0,        # x2, y2, z2 (body 2 on x-axis)
    0.0, 0.0, 0.0,        # vx2, vy2, vz2
    0.5, np.sqrt(3)/2, 0.0,  # x3, y3, z3 (body 3 at third vertex)
    0.0, 0.0, 0.0         # vx3, vy3, vz3
]

# Time configuration
t_span = [0, 10]  # Time interval for simulation
t_eval = np.linspace(0, 10, 1000)  # Time points for solution output

# Solve the initial value problem
sol = solve_ivp(
    three_body_dynamics,
    t_span,
    initial_conditions,
    args=(G, m1, m2, m3),
    t_eval=t_eval,
    method='RK45'
)

# Extract results
t = sol.t  # Time array
positions = sol.y[:9].T  # Positions: x1, y1, z1, x2, y2, z2, x3, y3, z3
velocities = sol.y[9:].T  # Velocities: vx1, vy1, vz1, vx2, vy2, vz2, vx3, vy3, vz3