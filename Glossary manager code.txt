from typing import Dict, Optional
import os

class GlossaryManager:
    def __init__(self):
        """Initialize an empty dictionary to store glossary objects."""
        self.glossaries: Dict[str, HashCache] = {}

    def load_glossary(self, version: str) -> 'HashCache':
        """
        Load a glossary for the specified version, creating it if it doesn't exist.
        
        Args:
            version (str): The version of the glossary to load.
        
        Returns:
            HashCache: The loaded glossary object.
        
        Raises:
            FileNotFoundError: If the corresponding video file does not exist.
        """
        if version not in self.glossaries:
            video_file = f"glossary_{version}.mp4"
            if not os.path.exists(video_file):
                raise FileNotFoundError(f"Glossary video file not found: {video_file}")
            self.glossaries[version] = HashCache(video_file)
        return self.glossaries[version]

    def get_data(self, operation_type: str, query_hash: str) -> Optional[str]:
        """
        Retrieve data from the appropriate glossary based on operation type and query hash.
        
        Args:
            operation_type (str): The type of operation determining the glossary version.
            query_hash (str): The hash key to retrieve specific data.
        
        Returns:
            Optional[str]: The data associated with the query_hash, or None if not found.
        """
        version = select_glossary_for_operation(operation_type)
        glossary = self.load_glossary(version)
        return glossary.get_data(query_hash)