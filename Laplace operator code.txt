import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import csr_matrix
from scipy.sparse.linalg import spsolve

class SpinErrorCorrection:
    def __init__(self, size=10, spin_strength=1.0):
        """
        Initialize the SpinErrorCorrection object.

        Args:
            size (int): The size of the 2D grid (size x size).
            spin_strength (float): Strength of the spin effect.
        """
        self.size = size
        self.spin_strength = spin_strength
        self.data = np.random.randint(0, 2, size=(size, size))
        self.error = np.zeros_like(self.data)

    def apply_spin_effect(self):
        """
        Simulate spin effects by adding Gaussian noise to modulate the data.
        """
        spin_effect = np.random.normal(0, self.spin_strength, self.data.shape)
        noisy_data = self.data + spin_effect
        self.data = (noisy_data > 0.5).astype(int)

    def introduce_error(self, noise_level=0.1):
        """
        Introduce random bit-flip errors to the data.

        Args:
            noise_level (float): Probability of error for each bit.
        """
        self.error = np.random.binomial(1, noise_level, self.data.shape)
        self.data = np.logical_xor(self.data, self.error).astype(int)

    def correct_errors_with_laplacian(self, iterations=10):
        """
        Correct errors using a Laplacian matrix for iterative smoothing.

        Args:
            iterations (int): Number of iterations for the correction process.
        """
        # Create the Laplacian matrix for the grid
        row, col = np.indices((self.size, self.size))
        row_indices = []
        col_indices = []
        data = []
        for i in range(self.size):
            for j in range(self.size):
                index = i * self.size + j
                neighbors = []
                if i > 0: neighbors.append((i - 1, j))
                if i < self.size - 1: neighbors.append((i + 1, j))
                if j > 0: neighbors.append((i, j - 1))
                if j < self.size - 1: neighbors.append((i, j + 1))
                for nx, ny in neighbors:
                    neighbor_index = nx * self.size + ny
                    row_indices.append(index)
                    col_indices.append(neighbor_index)
                    data.append(1)
                row_indices.append(index)
                col_indices.append(index)
                data.append(-len(neighbors))  # Diagonal element

        laplacian = csr_matrix((data, (row_indices, col_indices)), shape=(self.size**2, self.size**2))

        # Iterative error correction using the Laplacian
        flattened_data = self.data.flatten()
        for _ in range(iterations):
            # Solve for the smoothed data with regularization
            smoothed_data = spsolve(laplacian + 1e-5 * csr_matrix(np.eye(self.size**2)), flattened_data)
            flattened_data = (smoothed_data > 0.5).astype(int)

        # Reshape and update the data
        self.data = flattened_data.reshape(self.data.shape)

    def visualize(self):
        """
        Visualize the current state of the data grid.
        """
        plt.imshow(self.data, cmap='binary')
        plt.title('Data State')
        plt.colorbar()
        plt.show()

# Example usage
if __name__ == "__main__":
    corrector = SpinErrorCorrection(size=10, spin_strength=0.5)
    corrector.apply_spin_effect()
    corrector.introduce_error(noise_level=0.05)
    corrector.correct_errors_with_laplacian(iterations=10)
    corrector.visualize()