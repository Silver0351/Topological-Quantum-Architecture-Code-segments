import requests
from packaging import version
import logging

# Configure logging for system monitoring
logging.basicConfig(level=logging.INFO)

class GlossaryUpdater:
    def __init__(self, api_url, current_version):
        """
        Initialize the GlossaryUpdater with an API URL and current version.

        Args:
            api_url (str): The endpoint to fetch the latest glossary version.
            current_version (str): The version of the glossary currently in use.
        """
        self.api_url = api_url
        self.current_version = current_version

    def check_for_update(self):
        """
        Check if a newer glossary version is available from the API.

        Returns:
            str or None: The latest version if an update is available, else None.
        """
        try:
            # Fetch the latest version with a timeout for reliability
            response = requests.get(self.api_url, timeout=10)
            response.raise_for_status()  # Raise an exception for HTTP errors
            latest_version = response.json().get('version')  # Safely access 'version' key
            
            if not latest_version:
                logging.error("No 'version' field in API response.")
                return None

            # Compare versions using semantic versioning support
            if version.parse(latest_version) > version.parse(self.current_version):
                logging.info(f"New version available: {latest_version}")
                return latest_version
            else:
                logging.info("No update available.")
                return None

        except requests.RequestException as e:
            logging.error(f"Network error while fetching version: {e}")
            return None
        except version.InvalidVersion:
            logging.error(f"Invalid version format: current={self.current_version}, latest={latest_version}")
            return None
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            return None

    def download_new_version(self, new_version):
        """
        Placeholder for downloading the new glossary version.

        Args:
            new_version (str): The version to download.

        Note:
            This is a stub; actual implementation depends on system requirements.
        """
        logging.info(f"Downloading glossary version {new_version}...")
        # Example: requests.get(f"{self.api_url}/download/{new_version}")
        # Save to file or process as needed
        return True  # Placeholder return value

# Example usage
if __name__ == "__main__":
    updater = GlossaryUpdater("http://example.com/api/latest_glossary_version", "1.0")
    new_version = updater.check_for_update()
    if new_version:
        print(f"New version available: {new_version}")
        updater.download_new_version(new_version)