import numpy as np
import sounddevice as sd
import soundfile as sf
import json
import requests

class Initializer:
    def __init__(self, initial_matrix_size=4):
        """Initialize the fractal matrix system with a given size (power of 2)."""
        if not (initial_matrix_size > 0 and (initial_matrix_size & (initial_matrix_size - 1)) == 0):
            raise ValueError("initial_matrix_size must be a positive power of 2")
        self.matrix_size = initial_matrix_size
        self.fractal_matrix = self._init_fractal_matrix()
        self.instructions = self._generate_instructions()
        self.addons = {}

    def _init_fractal_matrix(self):
        """Generate a fractal matrix using Kronecker product starting from 1x1."""
        base = np.array([[1]], dtype=int)
        pattern = np.array([[1, 1], [1, 0]])
        n = int(np.log2(self.matrix_size))
        for _ in range(n):
            base = np.kron(base, pattern)
        return base

    def _generate_instructions(self):
        """Define operational instructions for the system."""
        return {
            'expand_rule': 'double_size',
            'data_encoding': 'frequency_amplitude',
            'addon_protocol': 'harmonic_addition'
        }

    def encode_to_tone(self):
        """Encode matrix size into an audio tone and save/play it."""
        frequency = self.matrix_size * 100  # Hz
        amplitude = 0.5
        duration = 1.0  # seconds
        samplerate = 44100  # Hz
        t = np.linspace(0, duration, int(samplerate * duration), endpoint=False)
        tone = amplitude * np.sin(2 * np.pi * frequency * t)
        modulated_tone = tone * (1 + 0.1 * np.sin(2 * np.pi * 20 * t))  # Add subtle modulation
        sf.write('initializer_tone.wav', modulated_tone, samplerate)
        sd.play(modulated_tone, samplerate)
        sd.wait()

    def decode_from_tone(self, audio_file):
        """Decode matrix size from audio and return a new fractal matrix and instructions."""
        data, samplerate = sf.read(audio_file)
        spectrum = np.abs(np.fft.rfft(data))
        frequency = np.argmax(spectrum) * (samplerate / len(data))
        matrix_size = int(round(frequency / 100))  # Round to nearest integer
        if not (matrix_size > 0 and (matrix_size & (matrix_size - 1)) == 0):
            matrix_size = 2 ** int(np.round(np.log2(matrix_size)))  # Adjust to nearest power of 2
        base = np.array([[1]], dtype=int)
        pattern = np.array([[1, 1], [1, 0]])
        n = int(np.log2(matrix_size))
        for _ in range(n):
            base = np.kron(base, pattern)
        return base, self.instructions

    def expand_matrix(self):
        """Expand the matrix size by doubling and reinitialize fractal pattern."""
        self.matrix_size *= 2
        self.fractal_matrix = self._init_fractal_matrix()

    def fetch_addons(self):
        """Fetch addon metadata from a server and process them."""
        try:
            response = requests.get('http://example.com/addons/list.json', timeout=5)
            if response.status_code == 200:
                addons_list = response.json()
                for addon in addons_list:
                    print(f"Available Addon: {addon['name']} - {addon['description']}")
                selected_addons = self._select_addons(addons_list)
                self._download_and_install_addons(selected_addons)
            else:
                print(f"Failed to fetch addons: HTTP {response.status_code}")
        except requests.RequestException as e:
            print(f"Error fetching addons: {e}")

    def _select_addons(self, addons_list):
        """Select all addons (placeholder for user interaction)."""
        return addons_list

    def _download_and_install_addons(self, selected_addons):
        """Download and install selected addons."""
        for addon in selected_addons:
            try:
                response = requests.get(addon['url'], timeout=5)
                if response.status_code == 200:
                    addon_data = response.content
                    try:
                        addon_json = json.loads(addon_data)
                        self.addons[addon['name']] = addon_json
                        self.apply_addon_pack(addon['name'])
                    except json.JSONDecodeError:
                        print(f"Addon {addon['name']} is not valid JSON; storing raw data")
                        self.addons[addon['name']] = addon_data
                else:
                    print(f"Failed to download {addon['name']}: HTTP {response.status_code}")
            except requests.RequestException as e:
                print(f"Error downloading {addon['name']}: {e}")

    def apply_addon_pack(self, addon_name):
        """Apply an addon to modify the fractal matrix."""
        if addon_name not in self.addons:
            print(f"Addon {addon_name} not found")
            return
        addon_data = self.addons[addon_name]
        if isinstance(addon_data, dict) and 'matrix' in addon_data:
            addon_matrix = np.array(addon_data['matrix'], dtype=int)
            if addon_matrix.shape == self.fractal_matrix.shape:
                self.fractal_matrix = np.maximum(self.fractal_matrix, addon_matrix)
            else:
                print(f"Size mismatch for {addon_name}: expected {self.fractal_matrix.shape}, got {addon_matrix.shape}")
        else:
            print(f"No valid matrix data in addon {addon_name}")

if __name__ == "__main__":
    init = Initializer()
    init.encode_to_tone()
    decoded_matrix, decoded_instructions = init.decode_from_tone('initializer_tone.wav')
    print("Decoded Matrix:\n", decoded_matrix)
    print("Decoded Instructions:", decoded_instructions)
    init.fetch_addons()
    print("Matrix after addons:\n", init.fractal_matrix)