using System;
using System.Net.Http;
using System.Threading.Tasks;

public class CloudFetcher
{
    private readonly HttpClient _httpClient;

    public CloudFetcher(HttpClient httpClient = null)
    {
        _httpClient = httpClient ?? new HttpClient();
    }

    public async Task<string> FetchFromCloudAsync(string endpoint)
    {
        if (string.IsNullOrEmpty(endpoint))
        {
            throw new ArgumentNullException(nameof(endpoint), "Endpoint cannot be null or empty.");
        }

        try
        {
            var response = await _httpClient.GetStringAsync(endpoint);
            return response;
        }
        catch (HttpRequestException ex)
        {
            throw new InvalidOperationException($"Failed to fetch data from {endpoint}", ex);
        }
        catch (TaskCanceledException ex)
        {
            throw new TimeoutException($"Request to {endpoint} timed out", ex);
        }
        catch (Exception ex)
        {
            throw new Exception($"An unexpected error occurred while fetching from {endpoint}", ex);
        }
    }
}