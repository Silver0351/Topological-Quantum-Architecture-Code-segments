import numpy as np
from qiskit import QuantumCircuit, QuantumRegister, execute, Aer
import networkx as nx  # For graph representation

class SpinNetwork:
    def __init__(self, num_qubits):
        """
        Initialize a SpinNetwork with a given number of qubits.
        
        Args:
            num_qubits (int): Number of qubits (nodes) in the network.
        """
        self.graph = nx.Graph()  # Undirected graph for spin network
        for i in range(num_qubits):
            self.graph.add_node(i)

    def add_edge(self, node1, node2):
        """
        Add an edge between two nodes in the spin network.
        
        Args:
            node1 (int): Index of the first node.
            node2 (int): Index of the second node.
        """
        self.graph.add_edge(node1, node2)

def weak_measurement(spin_network, target_node):
    """
    Simulate a weak measurement on a target node in the spin network.
    
    Args:
        spin_network (SpinNetwork): SpinNetwork object representing the quantum system.
        target_node (int): Index of the node to measure.
    
    Returns:
        numpy.ndarray: State vector after weak measurement.
    """
    num_qubits = len(spin_network.graph.nodes)
    qr = QuantumRegister(num_qubits)
    qc = QuantumCircuit(qr)
    
    # Apply CNOT gates for each edge to entangle connected qubits
    for edge in spin_network.graph.edges():
        qc.cx(edge[0], edge[1])
    
    # Apply a weak measurement: small rotation on the target node
    qc.ry(np.pi / 10, target_node)  # Small angle to avoid full collapse
    
    # Simulate the circuit and get the state vector
    backend = Aer.get_backend('statevector_simulator')
    job = execute(qc, backend)
    result = job.result()
    state_vector = result.get_statevector()
    
    return state_vector

# Example usage
if __name__ == "__main__":
    # Create a spin network with 5 qubits
    network = SpinNetwork(5)
    # Add edges to form a linear chain
    network.add_edge(0, 1)
    network.add_edge(1, 2)
    network.add_edge(2, 3)
    network.add_edge(3, 4)
    
    # Perform weak measurement on node 2
    weak_state = weak_measurement(network, 2)
    print("Resulting State Vector after Weak Measurement:", weak_state)