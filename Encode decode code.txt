import numpy as np
import soundfile as sf
import sounddevice as sd
from scipy.fft import fft, fftfreq

class FractalCommunication:
    def __init__(self, fractal_depth=3):
        """Initialize the FractalCommunication system with a specified fractal depth."""
        self.fractal_depth = fractal_depth
        self.data_tensor = None
        self.fractal_pattern = None

    def encode_data(self, data: str) -> np.ndarray:
        """
        Encode input data into an audio tone via a fractal pattern.

        Args:
            data (str): The message to encode.

        Returns:
            np.ndarray: The generated audio tone.
        """
        self.fractal_pattern = self._generate_fractal(data)
        return self._create_tone_from_fractal()

    def _generate_fractal(self, data: str) -> np.ndarray:
        """
        Generate a fractal pattern based on the input data.

        Args:
            data (str): The message to encode.

        Returns:
            np.ndarray: A 2D fractal pattern array.
        """
        # Seed fractal generation with data
        seed = sum(ord(c) for c in data)
        np.random.seed(seed)
        size = 2 ** self.fractal_depth
        # Placeholder fractal: random array seeded by data
        return np.random.rand(size, size)

    def _create_tone_from_fractal(self) -> np.ndarray:
        """
        Convert the fractal pattern into an audio tone.

        Returns:
            np.ndarray: The generated audio tone.
        """
        # Flatten fractal pattern and map to frequencies
        flattened = self.fractal_pattern.flatten()
        min_freq, max_freq = 100, 10000
        frequencies = min_freq + (max_freq - min_freq) * flattened

        # Generate 1-second tone at 44.1kHz
        t = np.linspace(0, 1, 44100)
        tone = np.sum([np.sin(2 * np.pi * freq * t) for freq in frequencies], axis=0)

        # Normalize to prevent clipping
        tone /= np.max(np.abs(tone))
        return tone

    def decode_tone(self, tone: np.ndarray) -> str:
        """
        Decode the audio tone back to the original data.

        Args:
            tone (np.ndarray): The audio tone to decode.

        Returns:
            str: The decoded message.
        """
        # FFT to extract frequency components
        N = len(tone)
        yf = fft(tone)
        xf = fftfreq(N, 1 / 44100)

        # Get top 10 dominant frequencies
        idx = np.argsort(np.abs(yf))[-10:]
        dominant_freqs = xf[idx]

        # Map frequencies back to fractal values
        min_freq, max_freq = 100, 10000
        fractal_values = (dominant_freqs - min_freq) / (max_freq - min_freq)

        # Simulate seed reconstruction
        seed = int(np.mean(fractal_values) * 1000)
        return f"Decoded from seed {seed}"

    def adjust_priority(self, system_load: float) -> str:
        """
        Adjust system operations based on load.

        Args:
            system_load (float): System load (0 to 1).

        Returns:
            str: Adjustment message.
        """
        if system_load > 0.8:
            return "Reduce operations due to high load"
        else:
            return "Increase operations"

# Example usage
if __name__ == "__main__":
    comm = FractalCommunication(fractal_depth=5)
    data = "Secret Message"
    tone = comm.encode_data(data)
    sf.write('encoded_tone.wav', tone, 44100)
    sd.play(tone, 44100)
    sd.wait()

    decoded = comm.decode_tone(tone)
    print("Decoded Message:", decoded)